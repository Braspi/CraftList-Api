//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa :: ToSchema,
)]
#[sea_orm(table_name = "servers")]
#[schema(title = "changeThis")]
# [schema (as = crate :: entities :: changeThis :: Model)]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub description: String,
    pub user_id: i32,
    pub is_premium: i8,
    pub created_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::players_graph::Entity")]
    PlayersGraph,
    #[sea_orm(has_many = "super::reviews::Entity")]
    Reviews,
    #[sea_orm(has_many = "super::server_categories::Entity")]
    ServerCategories,
    #[sea_orm(has_many = "super::servers_info::Entity")]
    ServersInfo,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Users,
}

impl Related<super::players_graph::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlayersGraph.def()
    }
}

impl Related<super::reviews::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Reviews.def()
    }
}

impl Related<super::server_categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ServerCategories.def()
    }
}

impl Related<super::servers_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ServersInfo.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
